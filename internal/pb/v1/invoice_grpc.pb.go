// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.3
// source: invoice.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	InvoiceService_CreateInvoice_FullMethodName       = "/invoice.v1.InvoiceService/CreateInvoice"
	InvoiceService_GetInvoices_FullMethodName         = "/invoice.v1.InvoiceService/GetInvoices"
	InvoiceService_InvoiceStatusStream_FullMethodName = "/invoice.v1.InvoiceService/InvoiceStatusStream"
)

// InvoiceServiceClient is the client API for InvoiceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvoiceServiceClient interface {
	CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*CreateInvoiceResponse, error)
	GetInvoices(ctx context.Context, in *GetInvoicesRequest, opts ...grpc.CallOption) (*GetInvoicesResponse, error)
	InvoiceStatusStream(ctx context.Context, in *InvoiceStatusStreamRequest, opts ...grpc.CallOption) (InvoiceService_InvoiceStatusStreamClient, error)
}

type invoiceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInvoiceServiceClient(cc grpc.ClientConnInterface) InvoiceServiceClient {
	return &invoiceServiceClient{cc}
}

func (c *invoiceServiceClient) CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*CreateInvoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInvoiceResponse)
	err := c.cc.Invoke(ctx, InvoiceService_CreateInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) GetInvoices(ctx context.Context, in *GetInvoicesRequest, opts ...grpc.CallOption) (*GetInvoicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInvoicesResponse)
	err := c.cc.Invoke(ctx, InvoiceService_GetInvoices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) InvoiceStatusStream(ctx context.Context, in *InvoiceStatusStreamRequest, opts ...grpc.CallOption) (InvoiceService_InvoiceStatusStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &InvoiceService_ServiceDesc.Streams[0], InvoiceService_InvoiceStatusStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &invoiceServiceInvoiceStatusStreamClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InvoiceService_InvoiceStatusStreamClient interface {
	Recv() (*InvoiceStatusStreamResponse, error)
	grpc.ClientStream
}

type invoiceServiceInvoiceStatusStreamClient struct {
	grpc.ClientStream
}

func (x *invoiceServiceInvoiceStatusStreamClient) Recv() (*InvoiceStatusStreamResponse, error) {
	m := new(InvoiceStatusStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InvoiceServiceServer is the server API for InvoiceService service.
// All implementations must embed UnimplementedInvoiceServiceServer
// for forward compatibility
type InvoiceServiceServer interface {
	CreateInvoice(context.Context, *CreateInvoiceRequest) (*CreateInvoiceResponse, error)
	GetInvoices(context.Context, *GetInvoicesRequest) (*GetInvoicesResponse, error)
	InvoiceStatusStream(*InvoiceStatusStreamRequest, InvoiceService_InvoiceStatusStreamServer) error
	mustEmbedUnimplementedInvoiceServiceServer()
}

// UnimplementedInvoiceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInvoiceServiceServer struct {
}

func (UnimplementedInvoiceServiceServer) CreateInvoice(context.Context, *CreateInvoiceRequest) (*CreateInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvoice not implemented")
}
func (UnimplementedInvoiceServiceServer) GetInvoices(context.Context, *GetInvoicesRequest) (*GetInvoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoices not implemented")
}
func (UnimplementedInvoiceServiceServer) InvoiceStatusStream(*InvoiceStatusStreamRequest, InvoiceService_InvoiceStatusStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method InvoiceStatusStream not implemented")
}
func (UnimplementedInvoiceServiceServer) mustEmbedUnimplementedInvoiceServiceServer() {}

// UnsafeInvoiceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvoiceServiceServer will
// result in compilation errors.
type UnsafeInvoiceServiceServer interface {
	mustEmbedUnimplementedInvoiceServiceServer()
}

func RegisterInvoiceServiceServer(s grpc.ServiceRegistrar, srv InvoiceServiceServer) {
	s.RegisterService(&InvoiceService_ServiceDesc, srv)
}

func _InvoiceService_CreateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).CreateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_CreateInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).CreateInvoice(ctx, req.(*CreateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_GetInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).GetInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_GetInvoices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).GetInvoices(ctx, req.(*GetInvoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_InvoiceStatusStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InvoiceStatusStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InvoiceServiceServer).InvoiceStatusStream(m, &invoiceServiceInvoiceStatusStreamServer{ServerStream: stream})
}

type InvoiceService_InvoiceStatusStreamServer interface {
	Send(*InvoiceStatusStreamResponse) error
	grpc.ServerStream
}

type invoiceServiceInvoiceStatusStreamServer struct {
	grpc.ServerStream
}

func (x *invoiceServiceInvoiceStatusStreamServer) Send(m *InvoiceStatusStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// InvoiceService_ServiceDesc is the grpc.ServiceDesc for InvoiceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InvoiceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "invoice.v1.InvoiceService",
	HandlerType: (*InvoiceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInvoice",
			Handler:    _InvoiceService_CreateInvoice_Handler,
		},
		{
			MethodName: "GetInvoices",
			Handler:    _InvoiceService_GetInvoices_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InvoiceStatusStream",
			Handler:       _InvoiceService_InvoiceStatusStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "invoice.proto",
}
