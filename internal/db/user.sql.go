// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users DEFAULT VALUES
RETURNING id
`

func (q *Queries) CreateUser(ctx context.Context) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createUser)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const userExistsById = `-- name: UserExistsById :one
SELECT EXISTS (
    SELECT 1
    FROM users
    WHERE id = $1
) AS user_exists
`

func (q *Queries) UserExistsById(ctx context.Context, id pgtype.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, userExistsById, id)
	var user_exists bool
	err := row.Scan(&user_exists)
	return user_exists, err
}
