// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: invoice.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const confirmInvoiceById = `-- name: ConfirmInvoiceById :one
UPDATE invoices
SET status = 'CONFIRMED',
    confirmed_at = timezone('UTC', now())
WHERE id = $1
RETURNING id, crypto_address, coin, required_amount, actual_amount, confirmations_required, created_at, confirmed_at, status, expires_at, tx_id, user_id
`

func (q *Queries) ConfirmInvoiceById(ctx context.Context, id pgtype.UUID) (Invoice, error) {
	row := q.db.QueryRow(ctx, confirmInvoiceById, id)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.CryptoAddress,
		&i.Coin,
		&i.RequiredAmount,
		&i.ActualAmount,
		&i.ConfirmationsRequired,
		&i.CreatedAt,
		&i.ConfirmedAt,
		&i.Status,
		&i.ExpiresAt,
		&i.TxID,
		&i.UserID,
	)
	return i, err
}

const confirmInvoiceStatusMempoolById = `-- name: ConfirmInvoiceStatusMempoolById :one
UPDATE invoices
SET actual_amount = $2,
    status = 'PENDING_MEMPOOL',
    tx_id = $3
WHERE id = $1
RETURNING id, crypto_address, coin, required_amount, actual_amount, confirmations_required, created_at, confirmed_at, status, expires_at, tx_id, user_id
`

type ConfirmInvoiceStatusMempoolByIdParams struct {
	ID           pgtype.UUID
	ActualAmount pgtype.Float8
	TxID         pgtype.Text
}

func (q *Queries) ConfirmInvoiceStatusMempoolById(ctx context.Context, arg ConfirmInvoiceStatusMempoolByIdParams) (Invoice, error) {
	row := q.db.QueryRow(ctx, confirmInvoiceStatusMempoolById, arg.ID, arg.ActualAmount, arg.TxID)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.CryptoAddress,
		&i.Coin,
		&i.RequiredAmount,
		&i.ActualAmount,
		&i.ConfirmationsRequired,
		&i.CreatedAt,
		&i.ConfirmedAt,
		&i.Status,
		&i.ExpiresAt,
		&i.TxID,
		&i.UserID,
	)
	return i, err
}

const createInvoice = `-- name: CreateInvoice :one
INSERT INTO invoices(
    crypto_address,
    coin,
    required_amount, 
    confirmations_required,
    expires_at,
    user_id) 
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, crypto_address, coin, required_amount, actual_amount, confirmations_required, created_at, confirmed_at, status, expires_at, tx_id, user_id
`

type CreateInvoiceParams struct {
	CryptoAddress         string
	Coin                  CoinType
	RequiredAmount        float64
	ConfirmationsRequired int16
	ExpiresAt             pgtype.Timestamptz
	UserID                pgtype.UUID
}

func (q *Queries) CreateInvoice(ctx context.Context, arg CreateInvoiceParams) (Invoice, error) {
	row := q.db.QueryRow(ctx, createInvoice,
		arg.CryptoAddress,
		arg.Coin,
		arg.RequiredAmount,
		arg.ConfirmationsRequired,
		arg.ExpiresAt,
		arg.UserID,
	)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.CryptoAddress,
		&i.Coin,
		&i.RequiredAmount,
		&i.ActualAmount,
		&i.ConfirmationsRequired,
		&i.CreatedAt,
		&i.ConfirmedAt,
		&i.Status,
		&i.ExpiresAt,
		&i.TxID,
		&i.UserID,
	)
	return i, err
}

const expireInvoiceById = `-- name: ExpireInvoiceById :one
UPDATE invoices
SET status = 'EXPIRED'
WHERE id = $1
RETURNING id, crypto_address, coin, required_amount, actual_amount, confirmations_required, created_at, confirmed_at, status, expires_at, tx_id, user_id
`

func (q *Queries) ExpireInvoiceById(ctx context.Context, id pgtype.UUID) (Invoice, error) {
	row := q.db.QueryRow(ctx, expireInvoiceById, id)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.CryptoAddress,
		&i.Coin,
		&i.RequiredAmount,
		&i.ActualAmount,
		&i.ConfirmationsRequired,
		&i.CreatedAt,
		&i.ConfirmedAt,
		&i.Status,
		&i.ExpiresAt,
		&i.TxID,
		&i.UserID,
	)
	return i, err
}

const findAllInvoicesByIds = `-- name: FindAllInvoicesByIds :many
SELECT id, crypto_address, coin, required_amount, actual_amount, confirmations_required, created_at, confirmed_at, status, expires_at, tx_id, user_id FROM invoices
WHERE id = ANY($1::uuid[])
`

func (q *Queries) FindAllInvoicesByIds(ctx context.Context, dollar_1 []pgtype.UUID) ([]Invoice, error) {
	rows, err := q.db.Query(ctx, findAllInvoicesByIds, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Invoice
	for rows.Next() {
		var i Invoice
		if err := rows.Scan(
			&i.ID,
			&i.CryptoAddress,
			&i.Coin,
			&i.RequiredAmount,
			&i.ActualAmount,
			&i.ConfirmationsRequired,
			&i.CreatedAt,
			&i.ConfirmedAt,
			&i.Status,
			&i.ExpiresAt,
			&i.TxID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllPendingInvoices = `-- name: FindAllPendingInvoices :many
SELECT id, crypto_address, coin, required_amount, actual_amount, confirmations_required, created_at, confirmed_at, status, expires_at, tx_id, user_id FROM invoices
WHERE status IN ('PENDING', 'PENDING_MEMPOOL')
`

func (q *Queries) FindAllPendingInvoices(ctx context.Context) ([]Invoice, error) {
	rows, err := q.db.Query(ctx, findAllPendingInvoices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Invoice
	for rows.Next() {
		var i Invoice
		if err := rows.Scan(
			&i.ID,
			&i.CryptoAddress,
			&i.Coin,
			&i.RequiredAmount,
			&i.ActualAmount,
			&i.ConfirmationsRequired,
			&i.CreatedAt,
			&i.ConfirmedAt,
			&i.Status,
			&i.ExpiresAt,
			&i.TxID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const shiftExpiresAtForNonConfirmedInvoices = `-- name: ShiftExpiresAtForNonConfirmedInvoices :many
UPDATE invoices
SET expires_at = timezone('UTC', now()) + INTERVAL '5 minute'
WHERE status IN ('PENDING', 'PENDING_MEMPOOL') AND (expires_at - timezone('UTC', now()) < INTERVAL '5 minutes')
RETURNING id, crypto_address, coin, required_amount, actual_amount, confirmations_required, created_at, confirmed_at, status, expires_at, tx_id, user_id
`

func (q *Queries) ShiftExpiresAtForNonConfirmedInvoices(ctx context.Context) ([]Invoice, error) {
	rows, err := q.db.Query(ctx, shiftExpiresAtForNonConfirmedInvoices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Invoice
	for rows.Next() {
		var i Invoice
		if err := rows.Scan(
			&i.ID,
			&i.CryptoAddress,
			&i.Coin,
			&i.RequiredAmount,
			&i.ActualAmount,
			&i.ConfirmationsRequired,
			&i.CreatedAt,
			&i.ConfirmedAt,
			&i.Status,
			&i.ExpiresAt,
			&i.TxID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
