// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: crypto_cache.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const findCryptoCacheByCoin = `-- name: FindCryptoCacheByCoin :one
SELECT coin, last_synced_block_height, synced_timestamp FROM crypto_cache
WHERE coin = $1
`

func (q *Queries) FindCryptoCacheByCoin(ctx context.Context, coin CoinType) (CryptoCache, error) {
	row := q.db.QueryRow(ctx, findCryptoCacheByCoin, coin)
	var i CryptoCache
	err := row.Scan(&i.Coin, &i.LastSyncedBlockHeight, &i.SyncedTimestamp)
	return i, err
}

const updateCryptoCacheByCoin = `-- name: UpdateCryptoCacheByCoin :one
UPDATE crypto_cache 
SET last_synced_block_height = $2,
    synced_timestamp = timezone('UTC', now())
WHERE coin = $1
RETURNING coin, last_synced_block_height, synced_timestamp
`

type UpdateCryptoCacheByCoinParams struct {
	Coin                  CoinType
	LastSyncedBlockHeight pgtype.Int8
}

func (q *Queries) UpdateCryptoCacheByCoin(ctx context.Context, arg UpdateCryptoCacheByCoinParams) (CryptoCache, error) {
	row := q.db.QueryRow(ctx, updateCryptoCacheByCoin, arg.Coin, arg.LastSyncedBlockHeight)
	var i CryptoCache
	err := row.Scan(&i.Coin, &i.LastSyncedBlockHeight, &i.SyncedTimestamp)
	return i, err
}
